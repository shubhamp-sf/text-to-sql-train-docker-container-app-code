name:                 scientific
version:              0.3.7.0
visibility:           public
id:
    scientific-0.3.7.0-87746086abbcba0c91aa13f229e4f5fbf4b549e7e1d8cdb554550ae9662ba874

key:
    scientific-0.3.7.0-87746086abbcba0c91aa13f229e4f5fbf4b549e7e1d8cdb554550ae9662ba874

license:              BSD-3-Clause
maintainer:           Bas van Dijk <v.dijk.bas@gmail.com>
author:               Bas van Dijk
homepage:             https://github.com/basvandijk/scientific
synopsis:             Numbers represented using scientific notation
description:
    "Data.Scientific" provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.

    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.

    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:

    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.

    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:

    >>> read "1e1000000000" :: Scientific
    1.0e1000000000

    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.

category:             Data
abi:                  1fa7a4f56d474a6596297e5a4f69ff84
exposed:              True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific

hidden-modules:       GHC.Integer.Compat Utils
import-dirs:
    /app/.cabal/store/ghc-8.10.7/scientific-0.3.7.0-87746086abbcba0c91aa13f229e4f5fbf4b549e7e1d8cdb554550ae9662ba874/lib

library-dirs:
    /app/.cabal/store/ghc-8.10.7/scientific-0.3.7.0-87746086abbcba0c91aa13f229e4f5fbf4b549e7e1d8cdb554550ae9662ba874/lib

dynamic-library-dirs:
    /app/.cabal/store/ghc-8.10.7/scientific-0.3.7.0-87746086abbcba0c91aa13f229e4f5fbf4b549e7e1d8cdb554550ae9662ba874/lib

data-dir:
    /app/.cabal/store/ghc-8.10.7/scientific-0.3.7.0-87746086abbcba0c91aa13f229e4f5fbf4b549e7e1d8cdb554550ae9662ba874/share

hs-libraries:
    HSscientific-0.3.7.0-87746086abbcba0c91aa13f229e4f5fbf4b549e7e1d8cdb554550ae9662ba874

depends:
    base-4.14.3.0 binary-0.8.8.0 bytestring-0.10.12.0
    containers-0.6.5.1 deepseq-1.4.4.0
    hashable-1.3.5.0-38ac512a8fca7331205e4a466b18225a1140d2f7309381fd440283069fc8b154
    integer-gmp-1.0.3.0
    integer-logarithms-1.0.3.1-b5e8bfff5cbd870ed5f69b506a02d0b6ed40ccff7a566b3c15120743f6a3fc29
    primitive-0.7.3.0-ca993c0684c5b48074dd2590184c6f06667d73290dfde50301aed62da070af56
    template-haskell-2.16.0.0 text-1.2.4.1

haddock-interfaces:
    /app/.cabal/store/ghc-8.10.7/scientific-0.3.7.0-87746086abbcba0c91aa13f229e4f5fbf4b549e7e1d8cdb554550ae9662ba874/share/doc/html/scientific.haddock

haddock-html:
    /app/.cabal/store/ghc-8.10.7/scientific-0.3.7.0-87746086abbcba0c91aa13f229e4f5fbf4b549e7e1d8cdb554550ae9662ba874/share/doc/html
